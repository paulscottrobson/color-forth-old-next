// ==================================================================================================================

@word.ix ,
		ex 		de,hl
		call	FARCompileWord
		pop 	de

// ==================================================================================================================

@macro ;s
		

// ==================================================================================================================

@word.hl 1,
		ld 		a,e
		call 	FARCompileByte
		pop 	de

// ==================================================================================================================

@word.hl digit

// ==================================================================================================================

@word.ix fill
		pop 	hl									; (number address count)
		pop 	bc 									; DE = count, HL = address, BC = number
		ld 		a,b
		or 		c 									
		jr 		z,__fillExit 						; if count zero exit.
__fillLoop:
		ld 		(hl),c
		inc 	hl
		dec 	de
		ld 		a,d
		or 		e
		jr 		nz,__fillLoop
__fillExit:
		pop 	de

// ==================================================================================================================

@word.ret forth
		xor 	a 									; set dictionary flag to $00
		ld 		(__DICTSelector),a

// ==================================================================================================================

@word.hl h
		push 	de 									; address of here
		ld 		de,Here

// ==================================================================================================================

@word.hl here
		push 	de 									; contents of here
		ld 		de,(Here)

// ==================================================================================================================

@word.ret macro
		ld		a,$80 								; set dictionary flag to $80
		ld 		(__DICTSelector),a

// ==================================================================================================================

@word.ix move
		ld 		b,d		 							; (source target count)
		ld 		c,e 								; put count in BC
		pop 	de 									; target in DE
		pop 	hl 									; source in HL
		ld 		a,b 								; zero check
		or 		c
		jr 		z,__moveExit
		ldir 										; do the move.
__moveExit:
		pop 	de

// ==================================================================================================================

@word.ix hex! 	
		pop 	hl 									; HL = word, DE = pos
		ex 		de,hl 								; right way round (!)
		call 	GFXWriteHexWord 					; write out the word
		pop 	de 									; fix up stack.

// ==================================================================================================================

@word.ix halt

__haltz80:
		di
		halt
		jr 		__haltz80

// ==================================================================================================================

@word.ix debug
		call 	DEBUGShow

