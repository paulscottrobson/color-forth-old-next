              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-17 10:48:52
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th November 2018
              	;		Purpose :	ColorForth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
7EF0:         	StackTop   = 	$7EF0 								; Top of stack
              	
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstCodePage = $22
              	
8000:         				org 	$8000
8000: 1804    				jr 		Boot
8002: FFFF    				org 	$8004							; pointer to SysInfo at $8004
8004: 1489    				dw 		SystemInformationTable
              				
8006: ED7B2889	Boot:		ld 		sp,(SIStack)					; reset Z80 Stack
800A: F3      				di										; disable interrupts
              	
800B: ED910702				db 		$ED,$91,7,2						; set turbo port (7) to 2 (14Mhz speed)
              	
800F: CD3A82  				call 	GFXInitialise48k 				; initialise and clear screen.
8012: CD4281  				call 	GFXConfigure
              	
8015: DD01    				db 		$DD,$01
8017: 3A2089  				ld 		a,(SIBootCodePage) 				; get the page to start
801A: CD8B80  				call 	PAGEInitialise
              	
801D: 2A1C89  				ld 		hl,(SIBootCodeAddress)
8020: E9      				jp 		(hl)
              	
8021: F3      	HaltZ80:	di
8022: 76      				halt
8023: 18FC    				jr 		HaltZ80
              	
              				include "support/macro.asm" 			; macro expander
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		macro.asm
              	;		Purpose:	Macro expansion
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;							Expand a macro at HL, length B
              	;
              	; *********************************************************************************
              	
8025:         	MacroExpand:
8025: 7E      			ld 		a,(hl)
8026: CDCA80  			call 	FARCompileByte
8029: 23      			inc 	hl
802A: 10F9    			djnz 	MacroExpand
802C: C9      			ret
              				include "support/debug.asm"				; debug helper
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		debug.asm
              	;		Purpose:	Debug routines
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
802D:         	DEBUGShowStackBottomLine:
802D: DDE1    			pop 	ix 									; IX = return address
802F: D5      			push 	de 									; save register TOS on stack
8030: DDE5    			push	ix 									; save IX on stack
              	
8032: 2A3889  			ld 		hl,(SIScreenSize) 					; calculate start position
8035: ED5B2C89			ld 		de,(SIScreenWidth)
8039: AF      			xor		a
803A: ED52    			sbc 	hl,de
803C: E5      			push 	hl
803D: 4B      			ld 		c,e
803E: 41      			ld 		b,c 								; clear the bottom line.
803F:         	__DSSSBLClear:
803F: 112002  			ld 		de,$0220
8042: CD5A81  			call 	GFXWriteCharacter
8045: 23      			inc 	hl
8046: 10F7    			djnz 	__DSSSBLClear
8048: E1      			pop 	hl 									; restore current position.
8049: DD210200			ld 		ix,$0002 							; copy SP+2 into IX
804D: DD39    			add 	ix,sp
804F:         	__DSSShowLoop:
804F: 3A2889  			ld 		a,(SIStack) 						; reached Top of execute stack 
8052: DDBD    			cp 		ixl									; (assumes < 256 byte data stack)
8054: 2816    			jr 		z,__DSSExit
8056: 79      			ld 		a,c 								; is there enough space ?
8057: FE05    			cp 		5
8059: 3811    			jr 		c,__DSSExit
805B: DD5601  			ld 		d,(ix+1)
805E: DD5E00  			ld 		e,(ix+0)
8061: CD7180  			call 	__DSSPrintDecimal
8064: 23      			inc 	hl 									; leave a space
8065: 0D      			dec 	c 									; one less character
8066: DD23    			inc 	ix 									; next entry on stack.
8068: DD23    			inc 	ix 
806A: 18E3    			jr 		__DSSShowLoop
              	
806C:         	__DSSExit:
806C: DDE1    			pop 	ix 									; and return address
806E: D1      			pop 	de 	 								; restore old TOS.
806F: DDE9    			jp		(ix)								; and go there.
              	
8071:         	__DSSPrintDecimal:	
8071: E5      			push 	hl
8072: 210A00  			ld 		hl,10
8075: CDFD80  			call 	DIVDivideMod16
8078: 7A      			ld 		a,d
8079: B3      			or 		e
807A: E3      			ex 		(sp),hl
807B: C47180  			call 	nz,__DSSPrintDecimal
807E: D1      			pop 	de
807F: 7B      			ld 		a,e
8080: C630    			add 	a,48
8082: 5F      			ld 		e,a
8083: 1606    			ld 		d,6
8085: CD5A81  			call 	GFXWriteCharacter
8088: 23      			inc		hl
8089: 0D      			dec 	c
808A: C9      			ret
              	
              				include "support/paging.asm" 			; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
808B:         	PAGEInitialise:
808B: ED9256  			db 		$ED,$92,$56							; switch to page A
808E: 3C      			inc 	a
808F: ED9257  			db 		$ED,$92,$57
8092: 3D      			dec 	a
8093: 08      			ex 		af,af' 								; put page in A'
8094: 214289  			ld 		hl,PAGEStackBase 					; reset the page stack
8097: 224089  			ld 		(PAGEStackPointer),hl
809A: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
809B:         	PAGESwitch:
809B: F5      			push 	af
809C: E5      			push 	hl
              	
809D: F5      			push 	af 									; save A on stack
809E: 2A4089  			ld 		hl,(PAGEStackPointer) 				; put A' on the stack, the current page
80A1: 08      			ex 		af,af'
80A2: 77      			ld 		(hl),a
80A3: 23      			inc 	hl
80A4: 224089  			ld 		(PAGEStackPointer),hl
              	
80A7: F1      			pop 	af 									; restore new A
80A8: ED9256  			db 		$ED,$92,$56							; switch to page A
80AB: 3C      			inc 	a
80AC: ED9257  			db 		$ED,$92,$57
80AF: 3D      			dec 	a
80B0: 08      			ex 		af,af' 								; put page in A'
              	
80B1: E1      			pop 	hl
80B2: F1      			pop 	af
80B3: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
80B4:         	PAGERestore:
80B4: F5      			push 	af
80B5: E5      			push 	hl
80B6: 2A4089  			ld 		hl,(PAGEStackPointer) 				; pop the old page off
80B9: 2B      			dec 	hl
80BA: 7E      			ld 		a,(hl)
80BB: 224089  			ld 		(PAGEStackPointer),hl
80BE: ED9256  			db 		$ED,$92,$56							; switch to page A
80C1: 3C      			inc 	a
80C2: ED9257  			db 		$ED,$92,$57
80C5: 3D      			dec 	a
80C6: 08      			ex 		af,af' 								; put page in A'
80C7: E1      			pop 	hl
80C8: F1      			pop 	af
80C9: C9      			ret
              			
              			
              				include "support/farmemory.asm" 		; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
80CA:         	FARCompileByte:
80CA: F5      			push 	af 									; save byte and HL
80CB: E5      			push 	hl
80CC: F5      			push 	af 									; save byte
80CD: 3A1889  			ld		a,(SINextFreeCodePage) 				; switch to page
80D0: CD9B80  			call 	PAGESwitch
80D3: 2A1489  			ld 		hl,(SINextFreeCode) 				; write to memory location
80D6: F1      			pop 	af
80D7: 77      			ld 		(hl),a
80D8: 23      			inc 	hl 									; bump memory location
80D9: 221489  			ld 		(SINextFreeCode),hl 				; write back
80DC: CDB480  			call 	PAGERestore
80DF: E1      			pop 	hl 									; restore and exit
80E0: F1      			pop 	af
80E1: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
80E2:         	FARCompileWord:
80E2: F5      			push 	af 									; save byte and HL
80E3: D5      			push 	de
80E4: E5      			push 	hl
80E5: EB      			ex 		de,hl 								; word into DE
80E6: 3A1889  			ld		a,(SINextFreeCodePage) 				; switch to page
80E9: CD9B80  			call 	PAGESwitch
80EC: 2A1489  			ld 		hl,(SINextFreeCode) 				; write to memory location
80EF: 73      			ld 		(hl),e
80F0: 23      			inc 	hl 	
80F1: 72      			ld 		(hl),d
80F2: 23      			inc 	hl
80F3: 221489  			ld 		(SINextFreeCode),hl 				; write back
80F6: CDB480  			call 	PAGERestore
80F9: E1      			pop 	hl
80FA: D1      			pop 	de 									; restore and exit
80FB: F1      			pop 	af
80FC: C9      			ret
              												
              				include "support/divide.asm" 			; division
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
80FD:         	DIVDivideMod16:
              	
80FD: C5      		push 	bc
80FE: 42      		ld 		b,d 				; DE 
80FF: 4B      		ld 		c,e
8100: EB      		ex 		de,hl
8101: 210000  		ld 		hl,0
8104: 78      		ld 		a,b
8105: 0608    		ld 		b,8
8107:         	Div16_Loop1:
8107: 17      		rla
8108: ED6A    		adc 	hl,hl
810A: ED52    		sbc 	hl,de
810C: 3001    		jr 		nc,Div16_NoAdd1
810E: 19      		add 	hl,de
810F:         	Div16_NoAdd1:
810F: 10F6    		djnz 	Div16_Loop1
8111: 17      		rla
8112: 2F      		cpl
8113: 47      		ld 		b,a
8114: 79      		ld 		a,c
8115: 48      		ld 		c,b
8116: 0608    		ld 		b,8
8118:         	Div16_Loop2:
8118: 17      		rla
8119: ED6A    		adc 	hl,hl
811B: ED52    		sbc 	hl,de
811D: 3001    		jr 		nc,Div16_NoAdd2
811F: 19      		add 	hl,de
8120:         	Div16_NoAdd2:
8120: 10F6    		djnz 	Div16_Loop2
8122: 17      		rla
8123: 2F      		cpl
8124: 51      		ld 		d,c
8125: 5F      		ld 		e,a
8126: C1      		pop 	bc
8127: C9      		ret
              			
              			
              				include "support/multiply.asm" 			; multiplication
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
8128:         	MULTMultiply16:
8128: C5      			push 	bc
8129: D5      			push 	de
812A: 44      			ld 		b,h 							; get multipliers in DE/BC
812B: 4D      			ld 		c,l
812C: 210000  			ld 		hl,0 							; zero total
812F:         	__Core__Mult_Loop:
812F: CB41    			bit 	0,c 							; lsb of shifter is non-zero
8131: 2801    			jr 		z,__Core__Mult_Shift
8133: 19      			add 	hl,de 							; add adder to total
8134:         	__Core__Mult_Shift:
8134: CB38    			srl 	b 								; shift BC right.
8136: CB19    			rr 		c
8138: EB      			ex 		de,hl 							; shift DE left
8139: 29      			add 	hl,hl
813A: EB      			ex 		de,hl
813B: 78      			ld 		a,b 							; loop back if BC is nonzero
813C: B1      			or 		c
813D: 20F0    			jr 		nz,__Core__Mult_Loop
813F: D1      			pop 	de
8140: C1      			pop 	bc
8141: C9      			ret
              				include "support/graphics.asm" 			; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
8142:         	GFXConfigure:
8142: 7D      			ld 		a,l 								; save screen size
8143: 322C89  			ld 		(SIScreenWidth),a
8146: 7C      			ld 		a,h
8147: 323089  			ld 		(SIScreenHeight),a
814A: EB      			ex 		de,hl 								; save driver
814B: 223489  			ld 		(SIScreenDriver),hl
814E: 6A      			ld		l,d 								; calculate and save full screen size
814F: 2600    			ld 		h,0
8151: 1600    			ld 		d,0
8153: CD2881  			call	MULTMultiply16
8156: 223889  			ld 		(SIScreenSize),hl
8159: C9      			ret
              	
815A:         	GFXWriteCharacter:
815A: F5      			push 	af
815B: C5      			push 	bc
815C: D5      			push 	de
815D: E5      			push 	hl
815E: 016881  			ld 		bc,__GFXWCExit
8161: C5      			push 	bc
8162: ED4B3489			ld 		bc,(SIScreenDriver)
8166: C5      			push 	bc
8167: C9      			ret
8168:         	__GFXWCExit:
8168: E1      			pop 	hl
8169: D1      			pop 	de
816A: C1      			pop 	bc
816B: F1      			pop 	af
816C: C9      			ret
              				include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              			
816D:         	IOScanKeyboard:
816D: C5      			push 	bc
816E: D5      			push 	de
816F: E5      			push 	hl
              	
8170: 21C281  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8173: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8175: 06FE    			ld 		b,$FE
8177: ED78    			in 		a,(c)
8179: CB47    			bit 	0,a
817B: 2005    			jr 		nz,__kr1
817D: 211282  			ld 		hl,__kr_shift_table
8180: 180B    			jr 		__kr2
8182:         	__kr1:
8182: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8184: ED78    			in 		a,(c)
8186: CB4F    			bit 	1,a
8188: 2003    			jr 		nz,__kr2
818A: 21EA81  			ld 		hl,__kr_symbol_shift_table
818D:         	__kr2:
              	
818D: 1EFE    			ld 		e,$FE 								; scan pattern.
818F: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
8190: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
8192: FEFE    			cp 		$FE
8194: 2808    			jr 		z,___kr4
8196: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
8198: FE7F    			cp 		$7F
819A: 2802    			jr 		z,___kr4
819C: 161F    			ld 		d,$01F 								; check all bits.
819E:         	___kr4:
819E: 43      			ld 		b,e 								; scan the keyboard
819F: 0EFE    			ld 		c,$FE
81A1: ED78    			in 		a,(c)
81A3: 2F      			cpl 										; make that active high.
81A4: A2      			and 	d  									; and with check value.
81A5: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
81A7: 23      			inc 	hl 									; next set of keyboard characters
81A8: 23      			inc 	hl
81A9: 23      			inc 	hl
81AA: 23      			inc 	hl
81AB: 23      			inc 	hl
              	
81AC: 7B      			ld 		a,e 								; get pattern
81AD: 87      			add 	a,a 								; shift left
81AE: F601    			or 		1 									; set bit 1.
81B0: 5F      			ld 		e,a
              	
81B1: FEFF    			cp 		$FF 								; finished when all 1's.
81B3: 20DA    			jr 		nz,__kr3 
81B5: AF      			xor 	a
81B6: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81B8:         	__kr_keypressed:
81B8: 23      			inc 	hl  								; shift right until carry set
81B9: 1F      			rra
81BA: 30FC    			jr 		nc,__kr_keypressed
81BC: 2B      			dec 	hl 									; undo the last inc hl
81BD: 7E      			ld 		a,(hl) 								; get the character number.
81BE:         	__kr_exit:
81BE: E1      			pop 	hl
81BF: D1      			pop 	de
81C0: C1      			pop 	bc
81C1: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-95: Std ASCII
              	;
81C2:         	__kr_no_shift_table:
81C2: 005A5843			db 		0,  'Z','X','C','V',			'A','S','D','F','G'
81C6: 56415344	
81CA: 4647    	
81CC: 51574552			db 		'Q','W','E','R','T',			'1','2','3','4','5'
81D0: 54313233	
81D4: 3435    	
81D6: 30393837			db 		'0','9','8','7','6',			'P','O','I','U','Y'
81DA: 36504F49	
81DE: 5559    	
81E0: 0D4C4B4A			db 		13, 'L','K','J','H',			' ', 0, 'M','N','B'
81E4: 4820004D	
81E8: 4E42    	
              	
81EA:         	__kr_symbol_shift_table:
81EA: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
81EE: 2F7E7C5C	
81F2: 7B7D    	
81F4: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
81F8: 3E214023	
81FC: 2425    	
81FE: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8202: 26223B00	
8206: 5D5B    	
8208: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
820C: 5E20002E	
8210: 2C2A    	
              	
8212:         	__kr_shift_table:
8212: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8216: 2F7E7C5C	
821A: 7B7D    	
821C: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
8220: 3E214023	
8224: 2414    	
8226: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
822A: 15223B00	
822E: 5D5B    	
8230: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8234: 5E20002E	
8238: 2C2A    	
              				include "support/screen48k.asm"			; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
823A:         	GFXInitialise48k:
823A: F5      			push 	af 									; save registers
823B: C5      			push 	bc
              	
823C: 013B12  			ld 		bc,$123B 							; Layer 2 access port
823F: 3E00    			ld 		a,0 								; disable Layer 2
8241: ED79    			out 	(c),a
8243: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8247: 210040  			ld 		hl,$4000 							; clear pixel memory
824A: 3600    	__cs1:	ld 		(hl),0
824C: 23      			inc 	hl
824D: 7C      			ld 		a,h
824E: FE58    			cp 		$58
8250: 20F8    			jr 		nz,__cs1
8252: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8254: 23      			inc 	hl
8255: 7C      			ld 		a,h
8256: FE5B    			cp 		$5B
8258: 20F8    			jr 		nz,__cs2	
825A: AF      			xor 	a 									; border off
825B: D3FE    			out 	($FE),a
825D: C1      			pop 	bc
825E: F1      			pop 	af
825F: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
8262: 116682  			ld 		de,GFXPrintCharacter48k
8265: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8266:         	GFXPrintCharacter48k:
8266: F5      			push 	af 									; save registers
8267: C5      			push 	bc
8268: D5      			push 	de
8269: E5      			push 	hl
              	
826A: 43      			ld 		b,e 								; character in B
826B: 7C      			ld 		a,h 								; check range.
826C: FE03    			cp 		3
826E: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8270: E5      			push 	hl 									; save position.
8271: 7C      			ld 		a,h
8272: C658    			add 	$58
8274: 67      			ld 		h,a
              	
8275: 7A      			ld 		a,d 								; get current colour
8276: E607    			and 	7  									; mask 0..2
8278: F640    			or 		$40  								; make bright
827A: 77      			ld 		(hl),a 								; store it.	
827B: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
827C: D5      			push 	de
827D: EB      			ex 		de,hl
827E: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
827F: 7A      			ld 		a,d
8280: E603    			and 	3
8282: 87      			add 	a,a
8283: 87      			add 	a,a
8284: 87      			add 	a,a
8285: F640    			or 		$40
8287: 67      			ld 		h,a
8288: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8289: E5      			push 	hl
828A: 78      			ld 		a,b 								; get character
828B: E67F    			and 	$7F 								; bits 0-6 only.
828D: D620    			sub 	32
828F: 6F      			ld 		l,a 								; put in HL
8290: 2600    			ld 		h,0
8292: 29      			add 	hl,hl 								; x 8
8293: 29      			add 	hl,hl
8294: 29      			add 	hl,hl
8295: ED5B3C89			ld 		de,(SIFontBase) 					; add the font base.
8299: 19      			add 	hl,de
829A: EB      			ex 		de,hl 								; put in DE (font address)
829B: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
829C: 78      			ld 		a,b
829D: 0608    			ld 		b,8 								; copy 8 characters
829F: 0E00    			ld 		c,0 								; XOR value 0
82A1: CB7F    			bit 	7,a 								; is the character reversed
82A3: 2801    			jr 		z,__ZXWCCopy
82A5: 0D      			dec 	c 									; C is the XOR mask now $FF
82A6:         	__ZXWCCopy:
82A6: 1A      			ld 		a,(de)								; get font data
82A7: A9      			xor 	c 									; xor with reverse
82A8: 77      			ld 		(hl),a 								; write back
82A9: 24      			inc 	h 									; bump pointers
82AA: 13      			inc 	de
82AB: 10F9    			djnz 	__ZXWCCopy 							; do B times.
82AD:         	__ZXWCExit:
82AD: E1      			pop 	hl 									; restore and exit
82AE: D1      			pop 	de
82AF: C1      			pop 	bc
82B0: F1      			pop 	af
82B1: C9      			ret
              				include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
82B2:         	GFXInitialiseLayer2:
82B2: F5      			push 	af
82B3: C5      			push 	bc
82B4: D5      			push 	de
82B5: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82B9: 1E02    			ld 		e,2 								; 3 banks to erase
82BB:         	L2PClear:
82BB: 7B      			ld 		a,e 								; put bank number in bits 6/7
82BC: CB0F    			rrc 	a
82BE: CB0F    			rrc 	a
82C0: F603    			or 		2+1 								; shadow on, visible, enable write paging
82C2: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82C5: ED79    			out 	(c),a
82C7: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82CA:         	L2PClearBank: 										; assume default palette :)
82CA: 2B      			dec 	hl
82CB: 3600    			ld 		(hl),$00
82CD: 7C      			ld 		a,h
82CE: B5      			or 		l
82CF: 20F9    			jr		nz,L2PClearBank
82D1: 1D      			dec 	e
82D2: F2BB82  			jp 		p,L2PClear
              	
82D5: AF      			xor 	a
82D6: D3FE    			out 	($FE),a
              	
82D8: D1      			pop 	de
82D9: C1      			pop 	bc
82DA: F1      			pop 	af
82DB: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82DE: 11E282  			ld 		de,GFXPrintCharacterLayer2
82E1: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82E2:         	GFXPrintCharacterLayer2:
82E2: F5      			push 	af
82E3: C5      			push 	bc
82E4: D5      			push 	de
82E5: E5      			push 	hl
82E6: DDE5    			push 	ix
              	
82E8: 43      			ld 		b,e 								; save A temporarily
82E9: 78      			ld 		a,b
82EA: E67F    			and 	$7F
82EC: FE20    			cp 		32
82EE: 3872    			jr 		c,__L2Exit 							; check char in range
82F0: 7C      			ld 		a,h
82F1: FE03    			cp 		3
82F3: 306D    			jr 		nc,__L2Exit 						; check position in range
82F5: 78      			ld 		a,b
              	
82F6: F5      			push 	af 	
82F7: AF      			xor 	a 									; convert colour in C to palette index
82F8: CB42    			bit 	0,d 								; (assumes standard palette)
82FA: 2802    			jr 		z,__L2Not1
82FC: F603    			or 		$03
82FE:         	__L2Not1:
82FE: CB52    			bit 	2,d
8300: 2802    			jr 		z,__L2Not2
8302: F61C    			or 		$1C
8304:         	__L2Not2:
8304: CB4A    			bit 	1,d
8306: 2802    			jr 		z,__L2Not3
8308: F6C0    			or 		$C0
830A:         	__L2Not3:
830A: 4F      			ld 		c,a 								; C is foreground
830B: 0600    			ld 		b,0									; B is xor flipper, initially zero
830D: F1      			pop 	af 									; restore char
              	
830E: E5      			push 	hl
830F: CB7F    			bit 	7,a 								; adjust background bit on bit 7
8311: 2802    			jr 		z,__L2NotCursor
8313: 06FF    			ld 		b,$FF 								; light grey is cursor
8315:         	__L2NotCursor:
8315: E67F    			and 	$7F 								; offset from space
8317: D620    			sub 	$20
8319: 6F      			ld 		l,a 								; put into HL
831A: 2600    			ld 		h,0
831C: 29      			add 	hl,hl 								; x 8
831D: 29      			add 	hl,hl
831E: 29      			add 	hl,hl
              	
831F: E5      			push 	hl 									; transfer to IX
8320: DDE1    			pop 	ix
8322: E1      			pop 	hl
              	
8323: C5      			push 	bc 									; add the font base to it.
8324: ED4B3C89			ld 		bc,(SIFontBase)
8328: DD09    			add 	ix,bc
832A: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
832B: C5      			push 	bc
832C: 7C      			ld  	a,h 								; this is the page number.
832D: CB0F    			rrc 	a
832F: CB0F    			rrc 	a
8331: E6C0    			and 	$C0 								; in bits 6 & 7
8333: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8335: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8338: ED79    			out 	(c),a
833A: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
833B: EB      			ex 		de,hl
833C: 6B      			ld 		l,e
833D: 2600    			ld 		h,0
833F: 29      			add 	hl,hl 								
8340: 29      			add 	hl,hl
8341: 29      			add 	hl,hl
8342: CB24    			sla 	h
8344: CB24    			sla 	h
8346: CB24    			sla 	h
              	
8348: 1E08    			ld 		e,8 								; do 8 rows
834A:         	__L2Outer:
834A: E5      			push 	hl 									; save start
834B: 1608    			ld 		d,8 								; do 8 columns
834D: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8350: A8      			xor 	b 									; maybe flip it ?
8351: DD23    			inc 	ix
8353:         	__L2Loop:
8353: 3600    			ld 		(hl),0 								; background
8355: 87      			add 	a,a 								; shift pattern left
8356: 3001    			jr 		nc,__L2NotSet
8358: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8359:         	__L2NotSet:
8359: 23      			inc 	hl
835A: 15      			dec 	d 									; do a row
835B: 20F6    			jr 		nz,	__L2Loop
835D: E1      			pop 	hl 									; restore, go 256 bytes down.
835E: 24      			inc 	h
835F: 1D      			dec 	e 									; do 8 rows
8360: 20E8    			jr 		nz,__L2Outer	
8362:         	__L2Exit:
8362: DDE1    			pop 	ix
8364: E1      			pop 	hl
8365: D1      			pop 	de
8366: C1      			pop 	bc
8367: F1      			pop 	af
8368: C9      			ret
              				include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8369:         	GFXInitialiseLowRes:
8369: F5      			push 	af
836A: C5      			push 	bc
836B: D5      			push 	de
              	
836C: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8370: AF      			xor 	a 									; layer 2 off.
8371: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8374: ED79    			out 	(c),a
              	
8376: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8379: 110060  			ld 		de,$6000
837C:         	LowClearScreen: 									; assume default palette :)
837C: AF      			xor 	a
837D: 77      			ld 		(hl),a
837E: 12      			ld 		(de),a
837F: 23      			inc 	hl
8380: 13      			inc 	de
8381: 7C      			ld 		a,h
8382: FE58    			cp 		$58
8384: 20F6    			jr		nz,LowClearScreen
8386: AF      			xor 	a
8387: D3FE    			out 	($FE),a
8389: D1      			pop 	de
838A: C1      			pop 	bc
838B: F1      			pop 	af
838C: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
838F: 119383  			ld 		de,GFXPrintCharacterLowRes
8392: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8393:         	GFXPrintCharacterLowRes:
8393: F5      			push 	af
8394: C5      			push 	bc
8395: D5      			push 	de
8396: E5      			push 	hl
8397: DDE5    			push 	ix
              	
8399: 43      			ld 		b,e 								; save character in B
839A: 7B      			ld 		a,e
839B: E67F    			and 	$7F
839D: FE20    			cp 		32
839F: 3866    			jr 		c,__LPExit
              	
83A1: 29      			add 	hl,hl
83A2: 29      			add 	hl,hl
83A3: 7C      			ld	 	a,h 								; check in range 192*4 = 768
83A4: FE03    			cp 		3
83A6: 305F    			jr 		nc,__LPExit
              	
83A8: 7A      			ld 		a,d 								; only lower 3 bits of colour
83A9: E607    			and 	7
83AB: 4F      			ld 		c,a 								; C is foreground
              	
83AC: E5      			push 	hl
83AD: 78      			ld 		a,b 								; get char back
83AE: 0600    			ld 		b,0 								; B = no flip colour.
83B0: CB7F    			bit 	7,a
83B2: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
83B4: 05      			dec 	b
83B5:         	__LowNotReverse:
83B5: E67F    			and 	$7F 								; offset from space
83B7: D620    			sub 	$20
83B9: 6F      			ld 		l,a 								; put into HL
83BA: 2600    			ld 		h,0
83BC: 29      			add 	hl,hl 								; x 8
83BD: 29      			add 	hl,hl
83BE: 29      			add 	hl,hl
              	
83BF: E5      			push 	hl 									; transfer to IX
83C0: DDE1    			pop 	ix
              	
83C2: C5      			push 	bc 									; add the font base to it.
83C3: ED4B3C89			ld 		bc,(SIFontBase)
83C7: DD09    			add 	ix,bc
83C9: C1      			pop 	bc
83CA: E1      			pop 	hl
83CB: EB      			ex 		de,hl
83CC: 7B      			ld 		a,e 								; put DE => HL
83CD: E6C0    			and 	192 								; these are part of Y
83CF: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
83D0: 62      			ld 		h,d		
83D1: 29      			add 	hl,hl
83D2: 29      			add 	hl,hl
83D3: 29      			add 	hl,hl
83D4: 29      			add 	hl,hl
83D5: CBF4    			set 	6,h 								; put into $4000 range
              	
83D7: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
83D9: A3      			and 	e 									; and with E, gives X position
83DA: 87      			add 	a,a 								; now multiplied by 8.
83DB: 5F      			ld 		e,a 								; DE is x offset.
83DC: 1600    			ld 		d,0  
              	
83DE: 19      			add 	hl,de
83DF: 7C      			ld 		a,h
83E0: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83E2: 3804    			jr 		c,__LowNotLower2
83E4: 110008  			ld 		de,$0800
83E7: 19      			add 	hl,de
83E8:         	__LowNotLower2:
83E8: 1E08    			ld 		e,8 								; do 8 rows
83EA:         	__LowOuter:
83EA: E5      			push 	hl 									; save start
83EB: 1608    			ld 		d,8 								; do 8 columns
83ED: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83F0: A8      			xor 	b
83F1: DD23    			inc 	ix
83F3:         	__LowLoop:
83F3: 3600    			ld 		(hl),0 								; background
83F5: 87      			add 	a,a 								; shift pattern left
83F6: 3001    			jr 		nc,__LowNotSet
83F8: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83F9:         	__LowNotSet:
83F9: 2C      			inc 	l
83FA: 15      			dec 	d 									; do a row
83FB: 20F6    			jr 		nz,	__LowLoop
83FD: E1      			pop 	hl 									; restore, go 256 bytes down.
83FE: D5      			push 	de
83FF: 118000  			ld 		de,128
8402: 19      			add 	hl,de
8403: D1      			pop 	de
8404: 1D      			dec 	e 									; do 8 rows
8405: 20E3    			jr 		nz,__LowOuter	
8407:         	__LPExit:
8407: DDE1    			pop 	ix
8409: E1      			pop 	hl
840A: D1      			pop 	de
840B: C1      			pop 	bc
840C: F1      			pop 	af
840D: C9      			ret
              	
              				include "temp/__words.asm"				; built file of words.
              	;
              	; Generated.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Binary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== * word ix ===========
              	
840E:         	forth__cforth_2a:
840E: DDE1    		pop ix
8410: E1      	  pop  hl
8411: CD2881  	  call  MULTMultiply16        ; HL := HL * DE
8414: EB      	  ex   de,hl
8415: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== / word ix ===========
              	
8417:         	forth__cforth_2f:
8417: DDE1    		pop ix
8419: E1      	  pop  hl
841A: CDFD80  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
841D: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== mod word ix ===========
              	
841F:         	forth__cforth_6d_6f_64:
841F: DDE1    		pop ix
8421: E1      	  pop  hl
8422: CDFD80  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
8425: EB      	  ex   de,hl
8426: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== /mod word ix ===========
              	
8428:         	forth__cforth_2f_6d_6f_64:
8428: DDE1    		pop ix
842A: E1      	  pop  hl
842B: CDFD80  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
842E: E5      	  push  hl
842F: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== + generator ix ===========
              	
8431:         	forth__cforth_2b:
8431: DDE1    		pop ix
8433:         	g__cforth_2b:
8433: E1      	  pop  hl
8434: 19      	  add  hl,de
8435: EB      	  ex   de,hl
8436:         	e__cforth_2b:
8436: DDE9    		jp (ix)
              	
8438:         	macro__cforth_2b:
8438: 0603    		ld b,e__cforth_2b-g__cforth_2b
843A: 213384  		ld hl,g__cforth_2b
843D: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== and word hl ===========
              	
8440:         	forth__cforth_61_6e_64:
8440: E1      		pop hl
8441: C1      	  pop  bc
8442: 7B      	  ld   a,e
8443: A1      	  and  c
8444: 5F      	  ld   e,a
8445: 7A      	  ld   a,d
8446: A0      	  and  b
8447: 57      	  ld   d,a
8448: E9      		jp (hl)
              	
              	; *********************************************************************************
              	
              	; =========== or word hl ===========
              	
8449:         	forth__cforth_6f_72:
8449: E1      		pop hl
844A: C1      	  pop  bc
844B: 7B      	  ld   a,e
844C: A9      	  xor  c
844D: 5F      	  ld   e,a
844E: 7A      	  ld   a,d
844F: A8      	  xor  b
8450: 57      	  ld   d,a
8451: E9      		jp (hl)
              	
              	; *********************************************************************************
              	
              	; =========== +or word hl ===========
              	
8452:         	forth__cforth_2b_6f_72:
8452: E1      		pop hl
8453: C1      	  pop  bc
8454: 7B      	  ld   a,e
8455: B1      	  or   c
8456: 5F      	  ld   e,a
8457: 7A      	  ld   a,d
8458: B0      	  or   b
8459: 57      	  ld   d,a
845A: E9      		jp (hl)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   compare.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Comparison words, min and max.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; *********************************************************************************
              	
              	; =========== = word ix ===========
              	
845B:         	forth__cforth_3d:
845B: DDE1    		pop ix
845D: EB      	  ex   de,hl
845E: C1      	  pop  bc
845F: 110000  	  ld   de,$0000
8462: 7C      	  ld   a,h
8463: B8      	  cp   b
8464: 2005    	  jr   nz,__equalFail
8466: 7D      	  ld   a,l
8467: B9      	  cp   c
8468: 2001    	  jr   nz,__equalFail
846A: 1B      	  dec  de
846B:         	__equalFail:
846B: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== <> word ix ===========
              	
846D:         	forth__cforth_3c_3e:
846D: DDE1    		pop ix
846F: EB      	  ex   de,hl
8470: C1      	  pop  bc
8471: 11FFFF  	  ld   de,$FFFF
8474: 7C      	  ld   a,h
8475: B8      	  cp   b
8476: 2005    	  jr   nz,__notEqualExit
8478: 7D      	  ld   a,l
8479: B9      	  cp   c
847A: 2001    	  jr   nz,__notEqualExit
847C: 13      	  inc  de
847D:         	__notEqualExit:
847D: DDE9    		jp (ix)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   graphic.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Graphic System words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; *********************************************************************************
              	
              	; =========== mode.48 word ret ===========
              	
847F:         	forth__cforth_6d_6f_64_65_2e_34_38:
847F: D5      	  push  de
8480: CD3A82  	  call  GFXInitialise48k
8483: CD4281  	  call  GFXConfigure
8486: D1      	  pop  de
8487: C9      		ret
              	
              	; *********************************************************************************
              	
              	; =========== mode.lowres word ret ===========
              	
8488:         	forth__cforth_6d_6f_64_65_2e_6c_6f_77_72_65_73:
8488: D5      	  push  de
8489: CD6983  	  call  GFXInitialiseLowRes
848C: CD4281  	  call  GFXConfigure
848F: D1      	  pop  de
8490: C9      		ret
              	
              	; *********************************************************************************
              	
              	; =========== mode.layer2 word ret ===========
              	
8491:         	forth__cforth_6d_6f_64_65_2e_6c_61_79_65_72_32:
8491: D5      	  push  de
8492: CDB282  	  call  GFXInitialiseLayer2
8495: CD4281  	  call  GFXConfigure
8498: D1      	  pop  de
8499: C9      		ret
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Memory and Hardware access
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== @ generator ix ===========
              	
849A:         	forth__cforth_40:
849A: DDE1    		pop ix
849C:         	g__cforth_40:
849C: EB      	  ex   de,hl
849D: 5E      	  ld   e,(hl)
849E: 23      	  inc  hl
849F: 56      	  ld   d,(hl)
84A0:         	e__cforth_40:
84A0: DDE9    		jp (ix)
              	
84A2:         	macro__cforth_40:
84A2: 0604    		ld b,e__cforth_40-g__cforth_40
84A4: 219C84  		ld hl,g__cforth_40
84A7: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== c@ generator hl ===========
              	
84AA:         	forth__cforth_63_40:
84AA: E1      		pop hl
84AB:         	g__cforth_63_40:
84AB: 1A      	  ld   a,(de)
84AC: 5F      	  ld   e,a
84AD: 1600    	  ld   d,0
84AF:         	e__cforth_63_40:
84AF: E9      		jp (hl)
              	
84B0:         	macro__cforth_63_40:
84B0: 0604    		ld b,e__cforth_63_40-g__cforth_63_40
84B2: 21AB84  		ld hl,g__cforth_63_40
84B5: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== c! generator ix ===========
              	
84B8:         	forth__cforth_63_21:
84B8: DDE1    		pop ix
84BA:         	g__cforth_63_21:
84BA: E1      	  pop  hl
84BB: 7D      	  ld   a,l
84BC: 12      	  ld   (de),a
84BD: D1      	  pop  de
84BE:         	e__cforth_63_21:
84BE: DDE9    		jp (ix)
              	
84C0:         	macro__cforth_63_21:
84C0: 0604    		ld b,e__cforth_63_21-g__cforth_63_21
84C2: 21BA84  		ld hl,g__cforth_63_21
84C5: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== ! generator ix ===========
              	
84C8:         	forth__cforth_21:
84C8: DDE1    		pop ix
84CA:         	g__cforth_21:
84CA: E1      	  pop  hl
84CB: 73      	  ld   (hl),e
84CC: 23      	  inc  hl
84CD: 72      	  ld   (hl),d
84CE: D1      	  pop  de
84CF:         	e__cforth_21:
84CF: DDE9    		jp (ix)
              	
84D1:         	macro__cforth_21:
84D1: 0605    		ld b,e__cforth_21-g__cforth_21
84D3: 21CA84  		ld hl,g__cforth_21
84D6: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== +! word ix ===========
              	
84D9:         	forth__cforth_2b_21:
84D9: DDE1    		pop ix
84DB: E1      	  pop  hl
84DC: 7E      	  ld   a,(hl)
84DD: 83      	  add  a,e
84DE: 77      	  ld   (hl),a
84DF: 23      	  inc  hl
84E0: 7E      	  ld   a,(hl)
84E1: 8A      	  adc  a,d
84E2: 77      	  ld   (hl),a
84E3: D1      	  pop  de
84E4: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== or! word ix ===========
              	
84E6:         	forth__cforth_6f_72_21:
84E6: DDE1    		pop ix
84E8: E1      	  pop  hl
84E9: 7E      	  ld   a,(hl)
84EA: B3      	  or   e
84EB: 77      	  ld   (hl),a
84EC: 23      	  inc  hl
84ED: 7E      	  ld   a,(hl)
84EE: B2      	  or   d
84EF: 77      	  ld   (hl),a
84F0: D1      	  pop  de
84F1: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== fill word ix ===========
              	
84F3:         	forth__cforth_66_69_6c_6c:
84F3: DDE1    		pop ix
              	
84F5: E1      	  pop  hl       ; top is count (DE) 2nd address (HL) 3rd value (BC)
84F6: C1      	  pop  bc
84F7: 7A      	  ld   a,d
84F8: B3      	  or   e
84F9: 2807    	  jr   z,__fill2
              	
84FB: 71      	__fill1:ld   (hl),c
84FC: 23      	  inc  hl
84FD: 0B      	  dec  bc
84FE: 7A      	  ld   a,d
84FF: B3      	  or   e
8500: 20F9    	  jr   nz,__fill1
8502:         	__fill2:
8502: D1      	  pop  de
8503: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== move word ix ===========
              	
8505:         	forth__cforth_6d_6f_76_65:
8505: DDE1    		pop ix
8507: 42      	  ld   b,d         ; top is count (BC)
8508: 4B      	  ld   c,e
8509: E1      	  pop  hl          ; 2nd is target (HL)
850A: D1      	  pop  de          ; 3rd is source (DE)
              	
850B: 78      	  ld   a,b
850C: B1      	  or   c
850D: 2815    	  jr   z,__move2
              	
850F: AF      	  xor  a          ; find direction.
8510: ED52    	  sbc  hl,de
8512: 7C      	  ld   a,h
8513: 19      	  add  hl,de
8514: CB7F    	  bit  7,a         ; if +ve use LDDR
8516: 2805    	  jr   z,__move3
              	
8518: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
8519: EDB0    	  ldir
851B: 1807    	  jr   __move2
              	
851D:         	__move3:
851D: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
851E: EB      	  ex   de,hl
851F: 09      	  add  hl,bc
8520: 1B      	  dec  de          ; -1 to point to last byte
8521: 2B      	  dec  hl
8522: EDB8    	  lddr
              	
8524:         	__move2:
8524: D1      	  pop  de
8525: DDE9    		jp (ix)
              	
              	; *********************************************************************************
              	
              	; =========== p@ generator hl ===========
              	
8527:         	forth__cforth_70_40:
8527: E1      		pop hl
8528:         	g__cforth_70_40:
8528: 42      	  ld   b,d
8529: 4B      	  ld   c,e
852A: ED58    	  in   e,(c)
852C: 1600    	  ld   d,0
852E:         	e__cforth_70_40:
852E: E9      		jp (hl)
              	
852F:         	macro__cforth_70_40:
852F: 0606    		ld b,e__cforth_70_40-g__cforth_70_40
8531: 212885  		ld hl,g__cforth_70_40
8534: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== p! generator hl ===========
              	
8537:         	forth__cforth_70_21:
8537: E1      		pop hl
8538:         	g__cforth_70_21:
8538: 42      	  ld   b,d
8539: 4B      	  ld   c,e
853A: D1      	  pop  de
853B: ED59    	  out  (c),e
853D: D1      	  pop  de
853E:         	e__cforth_70_21:
853E: E9      		jp (hl)
              	
853F:         	macro__cforth_70_21:
853F: 0606    		ld b,e__cforth_70_21-g__cforth_70_21
8541: 213885  		ld hl,g__cforth_70_21
8544: C32580  		jp MacroExpand
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Stack operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== drop generator hl ===========
              	
8547:         	forth__cforth_64_72_6f_70:
8547: E1      		pop hl
8548:         	g__cforth_64_72_6f_70:
8548: D1      	  pop  de
8549:         	e__cforth_64_72_6f_70:
8549: E9      		jp (hl)
              	
854A:         	macro__cforth_64_72_6f_70:
854A: 0601    		ld b,e__cforth_64_72_6f_70-g__cforth_64_72_6f_70
854C: 214885  		ld hl,g__cforth_64_72_6f_70
854F: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== dup generator hl ===========
              	
8552:         	forth__cforth_64_75_70:
8552: E1      		pop hl
8553:         	g__cforth_64_75_70:
8553: D5      	  push  de
8554:         	e__cforth_64_75_70:
8554: E9      		jp (hl)
              	
8555:         	macro__cforth_64_75_70:
8555: 0601    		ld b,e__cforth_64_75_70-g__cforth_64_75_70
8557: 215385  		ld hl,g__cforth_64_75_70
855A: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== nip generator ix ===========
              	
855D:         	forth__cforth_6e_69_70:
855D: DDE1    		pop ix
855F:         	g__cforth_6e_69_70:
855F: E1      	  pop  hl
8560: D5      	  push  de
8561: EB      	  ex   de,hl
8562:         	e__cforth_6e_69_70:
8562: DDE9    		jp (ix)
              	
8564:         	macro__cforth_6e_69_70:
8564: 0603    		ld b,e__cforth_6e_69_70-g__cforth_6e_69_70
8566: 215F85  		ld hl,g__cforth_6e_69_70
8569: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== over generator ix ===========
              	
856C:         	forth__cforth_6f_76_65_72:
856C: DDE1    		pop ix
856E:         	g__cforth_6f_76_65_72:
856E: E1      	  pop  hl
856F: D5      	  push  de
8570: EB      	  ex   de,hl
8571:         	e__cforth_6f_76_65_72:
8571: DDE9    		jp (ix)
              	
8573:         	macro__cforth_6f_76_65_72:
8573: 0603    		ld b,e__cforth_6f_76_65_72-g__cforth_6f_76_65_72
8575: 216E85  		ld hl,g__cforth_6f_76_65_72
8578: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== swap generator ix ===========
              	
857B:         	forth__cforth_73_77_61_70:
857B: DDE1    		pop ix
857D:         	g__cforth_73_77_61_70:
857D: E1      	  pop  hl
857E: EB      	  ex   de,hl
857F: E5      	  push  hl
8580:         	e__cforth_73_77_61_70:
8580: DDE9    		jp (ix)
              	
8582:         	macro__cforth_73_77_61_70:
8582: 0603    		ld b,e__cforth_73_77_61_70-g__cforth_73_77_61_70
8584: 217D85  		ld hl,g__cforth_73_77_61_70
8587: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Unary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== bswap generator ret ===========
              	
858A:         	forth__cforth_62_73_77_61_70:
858A:         	g__cforth_62_73_77_61_70:
858A: 7A      	  ld   a,d
858B: 53      	  ld   d,e
858C: 5F      	  ld   e,a
858D:         	e__cforth_62_73_77_61_70:
858D: C9      		ret
              	
858E:         	macro__cforth_62_73_77_61_70:
858E: 0603    		ld b,e__cforth_62_73_77_61_70-g__cforth_62_73_77_61_70
8590: 218A85  		ld hl,g__cforth_62_73_77_61_70
8593: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== 2* generator ret ===========
              	
8596:         	forth__cforth_32_2a:
8596:         	g__cforth_32_2a:
8596: EB      	  ex   de,hl
8597: 29      	  add  hl,hl
8598: EB      	  ex   de,hl
8599:         	e__cforth_32_2a:
8599: C9      		ret
              	
859A:         	macro__cforth_32_2a:
859A: 0603    		ld b,e__cforth_32_2a-g__cforth_32_2a
859C: 219685  		ld hl,g__cforth_32_2a
859F: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== 2/ generator ret ===========
              	
85A2:         	forth__cforth_32_2f:
85A2:         	g__cforth_32_2f:
85A2: CB3A    	  srl  d
85A4: CB1B    	  rr   e
85A6:         	e__cforth_32_2f:
85A6: C9      		ret
              	
85A7:         	macro__cforth_32_2f:
85A7: 0604    		ld b,e__cforth_32_2f-g__cforth_32_2f
85A9: 21A285  		ld hl,g__cforth_32_2f
85AC: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== 1+ generator ret ===========
              	
85AF:         	forth__cforth_31_2b:
85AF:         	g__cforth_31_2b:
85AF: 13      	  inc  de
85B0:         	e__cforth_31_2b:
85B0: C9      		ret
              	
85B1:         	macro__cforth_31_2b:
85B1: 0601    		ld b,e__cforth_31_2b-g__cforth_31_2b
85B3: 21AF85  		ld hl,g__cforth_31_2b
85B6: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== 2+ generator ret ===========
              	
85B9:         	forth__cforth_32_2b:
85B9:         	g__cforth_32_2b:
85B9: 13      	  inc  de
85BA: 13      	  inc  de
85BB:         	e__cforth_32_2b:
85BB: C9      		ret
              	
85BC:         	macro__cforth_32_2b:
85BC: 0602    		ld b,e__cforth_32_2b-g__cforth_32_2b
85BE: 21B985  		ld hl,g__cforth_32_2b
85C1: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== 1- generator ret ===========
              	
85C4:         	forth__cforth_31_2d:
85C4:         	g__cforth_31_2d:
85C4: 1B      	  dec  de
85C5:         	e__cforth_31_2d:
85C5: C9      		ret
              	
85C6:         	macro__cforth_31_2d:
85C6: 0601    		ld b,e__cforth_31_2d-g__cforth_31_2d
85C8: 21C485  		ld hl,g__cforth_31_2d
85CB: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== 2- generator ret ===========
              	
85CE:         	forth__cforth_32_2d:
85CE:         	g__cforth_32_2d:
85CE: 1B      	  dec  de
85CF: 1B      	  dec  de
85D0:         	e__cforth_32_2d:
85D0: C9      		ret
              	
85D1:         	macro__cforth_32_2d:
85D1: 0602    		ld b,e__cforth_32_2d-g__cforth_32_2d
85D3: 21CE85  		ld hl,g__cforth_32_2d
85D6: C32580  		jp MacroExpand
              	
              	; *********************************************************************************
              	
              	; =========== - word ret ===========
              	
85D9:         	forth__cforth_2d:
85D9: 7A      	  ld   a,d
85DA: 2F      	  cpl
85DB: 57      	  ld   d,a
85DC: 7B      	  ld   a,e
85DD: 2F      	  cpl
85DE: 5F      	  ld   e,a
85DF: C9      		ret
              	
              	; *********************************************************************************
              	
              	; =========== negate word ret ===========
              	
85E0:         	forth__cforth_6e_65_67_61_74_65:
85E0: 7A      	  ld   a,d
85E1: 2F      	  cpl
85E2: 57      	  ld   d,a
85E3: 7B      	  ld   a,e
85E4: 2F      	  cpl
85E5: 5F      	  ld   e,a
85E6: 13      	  inc  de
85E7: C9      		ret
              	
              	; *********************************************************************************
              	
              	; =========== abs word ret ===========
              	
85E8:         	forth__cforth_61_62_73:
85E8: CB7A    	  bit  7,d
85EA: 2807    	  jr   z,__IsPositive
85EC: 7A      	  ld   a,d
85ED: 2F      	  cpl
85EE: 57      	  ld   d,a
85EF: 7B      	  ld   a,e
85F0: 2F      	  cpl
85F1: 5F      	  ld   e,a
85F2: 13      	  inc  de
85F3:         	__IsPositive:
85F3: C9      		ret
              	
              	; *********************************************************************************
              	
              	; =========== 0= word ret ===========
              	
85F4:         	forth__cforth_30_3d:
85F4: 7A      	  ld   a,d
85F5: B3      	  or   e
85F6: 110000  	  ld   de,$0000
85F9: 2001    	  jr   nz,__IsNonZero
85FB: 1B      	  dec  de
85FC:         	__IsNonZero:
85FC: C9      		ret
              	
              	; *********************************************************************************
              	
              	; =========== 0< word ret ===========
              	
85FD:         	forth__cforth_30_3c:
85FD: CB7A    	  bit  7,d
85FF: 110000  	  ld   de,$0000
8602: 2801    	  jr   z,__IsPositive2
8604: 1B      	  dec  de
8605:         	__IsPositive2:
8605: C9      		ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   utility.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Miscellaneous words.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== inkey word hl ===========
              	
8606:         	forth__cforth_69_6e_6b_65_79:
8606: E1      		pop hl
8607: D5      	  push  de
8608: CD6D81  	  call  IOScanKeyboard
860B: 5F      	  ld   e,a
860C: 1600    	  ld   d,0
860E: E9      		jp (hl)
              	
              	; ***************************************************************************************
              	
              	; =========== halt word ret ===========
              	
860F:         	forth__cforth_68_61_6c_74:
              	
860F:         	__haltLoop:
860F: F3      	  di
8610: 76      	  halt
8611: 18FC    	  jr   __haltLoop
              	
8613: C9      		ret
              	
              	
8614:         	AlternateFont:										; nicer font
              				include "font.inc" 						; can be $3D00 here to save memory
8614: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
8618: 00000000	
861C: 0C1E1E0C	
8620: 0C000C00	
8624: 36360000	
8628: 00000000	
862C: 36367F36	
8630: 7F363600	
8634: 183E603C	
8638: 067C1800	
863C: 0063660C	
8640: 18336300	
8644: 1C361C3B	
8648: 6E663B00	
864C: 30306000	
8650: 00000000	
8654: 0C183030	
8658: 30180C00	
865C: 30180C0C	
8660: 0C183000	
8664: 00331E7F	
8668: 1E330000	
866C: 0018187E	
8670: 18180000	
8674: 00000000	
8678: 00181830	
867C: 0000007E	
8680: 00000000	
8684: 00000000	
8688: 00181800	
868C: 03060C18	
8690: 30604000	
8694: 3E63676F	
8698: 7B733E00	
869C: 18381818	
86A0: 18187E00	
86A4: 3C66061C	
86A8: 30667E00	
86AC: 3C66061C	
86B0: 06663C00	
86B4: 0E1E3666	
86B8: 7F060F00	
86BC: 7E607C06	
86C0: 06663C00	
86C4: 1C30607C	
86C8: 66663C00	
86CC: 7E66060C	
86D0: 18181800	
86D4: 3C66663C	
86D8: 66663C00	
86DC: 3C66663E	
86E0: 060C3800	
86E4: 00181800	
86E8: 00181800	
86EC: 00181800	
86F0: 00181830	
86F4: 0C183060	
86F8: 30180C00	
86FC: 00007E00	
8700: 007E0000	
8704: 30180C06	
8708: 0C183000	
870C: 3C66060C	
8710: 18001800	
8714: 3E636F6F	
8718: 6F603C00	
871C: 183C6666	
8720: 7E666600	
8724: 7E33333E	
8728: 33337E00	
872C: 1E336060	
8730: 60331E00	
8734: 7C363333	
8738: 33367C00	
873C: 7F31343C	
8740: 34317F00	
8744: 7F31343C	
8748: 34307800	
874C: 1E336060	
8750: 67331F00	
8754: 6666667E	
8758: 66666600	
875C: 3C181818	
8760: 18183C00	
8764: 0F060606	
8768: 66663C00	
876C: 7333363C	
8770: 36337300	
8774: 78303030	
8778: 31337F00	
877C: 63777F7F	
8780: 6B636300	
8784: 63737B6F	
8788: 67636300	
878C: 1C366363	
8790: 63361C00	
8794: 7E33333E	
8798: 30307800	
879C: 3C666666	
87A0: 6E3C0E00	
87A4: 7E33333E	
87A8: 36337300	
87AC: 3C667038	
87B0: 0E663C00	
87B4: 7E5A1818	
87B8: 18183C00	
87BC: 66666666	
87C0: 66667E00	
87C4: 66666666	
87C8: 663C1800	
87CC: 6363636B	
87D0: 7F776300	
87D4: 6363361C	
87D8: 1C366300	
87DC: 6666663C	
87E0: 18183C00	
87E4: 7F63460C	
87E8: 19337F00	
87EC: 3C303030	
87F0: 30303C00	
87F4: 6030180C	
87F8: 06030100	
87FC: 3C0C0C0C	
8800: 0C0C3C00	
8804: 081C3663	
8808: 00000000	
880C: 00000000	
8810: 0000007F	
8814: 18180C00	
8818: 00000000	
881C: 00003C06	
8820: 3E663B00	
8824: 7030303E	
8828: 33336E00	
882C: 00003C66	
8830: 60663C00	
8834: 0E06063E	
8838: 66663B00	
883C: 00003C66	
8840: 7E603C00	
8844: 1C363078	
8848: 30307800	
884C: 00003B66	
8850: 663E067C	
8854: 7030363B	
8858: 33337300	
885C: 18003818	
8860: 18183C00	
8864: 06000606	
8868: 0666663C	
886C: 70303336	
8870: 3C367300	
8874: 38181818	
8878: 18183C00	
887C: 0000667F	
8880: 7F6B6300	
8884: 00007C66	
8888: 66666600	
888C: 00003C66	
8890: 66663C00	
8894: 00006E33	
8898: 333E3078	
889C: 00003B66	
88A0: 663E060F	
88A4: 00006E3B	
88A8: 33307800	
88AC: 00003E60	
88B0: 3C067C00	
88B4: 08183E18	
88B8: 181A0C00	
88BC: 00006666	
88C0: 66663B00	
88C4: 00006666	
88C8: 663C1800	
88CC: 0000636B	
88D0: 7F7F3600	
88D4: 00006336	
88D8: 1C366300	
88DC: 00006666	
88E0: 663E067C	
88E4: 00007E4C	
88E8: 18327E00	
88EC: 0E181870	
88F0: 18180E00	
88F4: 0C0C0C00	
88F8: 0C0C0C00	
88FC: 7018180E	
8900: 18187000	
8904: 3B6E0000	
8908: 00000000	
890C: 00...   	
              	
              	
              				include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
8914:         	SystemInformationTable:
              	
8914:         	SINextFreeCode: 									; +0 	Next Free Code Byte
8914: 00A00000			dw 		FreeMemory,0
8918:         	SINextFreeCodePage: 								; +4 	Next Free Code Byte Page
8918: 22000000			dw 		FirstCodePage,0
891C:         	SIBootCodeAddress:									; +8	Run from here
891C: 21800000			dw 		HaltZ80,0
8920:         	SIBootCodePage: 									; +12   Run page.
8920: 22000000			db		FirstCodePage,0,0,0
8924:         	SIPageUsage:										; +16 	Page Usage Table
8924: 52890000			dw 		PageUsage,0 			
8928:         	SIStack:											; +20 	Initial Z80 stack value
8928: F07E0000			dw 		StackTop,0							
892C:         	SIScreenWidth:										; +24 	Screen Width
892C: 00000000			dw 		0,0
8930:         	SIScreenHeight:										; +28 	Screen Height
8930: 00000000			dw 		0,0
8934:         	SIScreenDriver:										; +32 	Screen Driver
8934: 00000000			dw 		0,0 								
8938:         	SIScreenSize: 										; +36  	Screen Size
8938: 00000000			dw 		0,0 
893C:         	SIFontBase:											; +40 	768 byte font, begins with space
893C: 14860000			dw 		AlternateFont,0 							
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8940:         	PAGEStackPointer: 									; stack used for switching pages
8940: 0000    			dw 		0
8942:         	PAGEStackBase:
8942: FFFFFFFF			ds 		16
8946: FF...   	
              	
8952:         	PageUsage:
8952: 01      			db 		1									; $20 (dictionary) [1 = system]
8953: 02      			db 		2 									; $24 (first code) [2 = code]
8954: 00000000			db 		0,0,0,0,0,0 						; $24-$2E 		   [0 = unused]
8958: 0000    	
895A: 00000000			db 		0,0,0,0,0,0,0,0 					; $30-$3E
895E: 00000000	
8962: 00000000			db 		0,0,0,0,0,0,0,0 					; $40-$4E
8966: 00000000	
896A: 00000000			db 		0,0,0,0,0,0,0,0 					; $50-$5E
896E: 00000000	
8972: FF      			db 		$FF 								; end of page.
              	
8973: FFFFFFFF			org 	$A000
8977: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF				org 	$C000
A004: FF...   	
C000: 00      				db 		0 								; start of dictionary, which is empty.


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont             = $8614 = 34324          kernel.asm:54
Boot                      = $8006 = 32774          kernel.asm:22
DEBUGShowStackBottomLine  = $802D = 32813          debug.asm:12 (unused)
DIVDivideMod16            = $80FD = 33021          divide.asm:18
DictionaryPage            = $0020 =    32          kernel.asm:14 (unused)
Div16_Loop1               = $8107 = 33031          divide.asm:27
Div16_Loop2               = $8118 = 33048          divide.asm:41
Div16_NoAdd1              = $810F = 33039          divide.asm:33
Div16_NoAdd2              = $8120 = 33056          divide.asm:47
FARCompileByte            = $80CA = 32970          farmemory.asm:18
FARCompileWord            = $80E2 = 32994          farmemory.asm:40 (unused)
FirstCodePage             = $0022 =    34          kernel.asm:15
FreeMemory                = $A000 = 40960          data.asm:64
GFXConfigure              = $8142 = 33090          graphics.asm:12
GFXInitialise48k          = $823A = 33338          screen48k.asm:19
GFXInitialiseLayer2       = $82B2 = 33458          screen_layer2.asm:19
GFXInitialiseLowRes       = $8369 = 33641          screen_lores.asm:18
GFXPrintCharacter48k      = $8266 = 33382          screen48k.asm:53
GFXPrintCharacterLayer2   = $82E2 = 33506          screen_layer2.asm:55
GFXPrintCharacterLowRes   = $8393 = 33683          screen_lores.asm:50
GFXWriteCharacter         = $815A = 33114          graphics.asm:26
HaltZ80                   = $8021 = 32801          kernel.asm:37
IOScanKeyboard            = $816D = 33133          keyboard.asm:18
L2PClear                  = $82BB = 33467          screen_layer2.asm:26
L2PClearBank              = $82CA = 33482          screen_layer2.asm:34
LowClearScreen            = $837C = 33660          screen_lores.asm:30
MULTMultiply16            = $8128 = 33064          multiply.asm:18
MacroExpand               = $8025 = 32805          macro.asm:18
PAGEInitialise            = $808B = 32907          paging.asm:18
PAGERestore               = $80B4 = 32948          paging.asm:62
PAGEStackBase             = $8942 = 35138          data.asm:51
PAGEStackPointer          = $8940 = 35136          data.asm:49
PAGESwitch                = $809B = 32923          paging.asm:34
PageUsage                 = $8952 = 35154          data.asm:54
SIBootCodeAddress         = $891C = 35100          data.asm:24
SIBootCodePage            = $8920 = 35104          data.asm:26
SIFontBase                = $893C = 35132          data.asm:40
SINextFreeCode            = $8914 = 35092          data.asm:20
SINextFreeCodePage        = $8918 = 35096          data.asm:22
SIPageUsage               = $8924 = 35108          data.asm:28 (unused)
SIScreenDriver            = $8934 = 35124          data.asm:36
SIScreenHeight            = $8930 = 35120          data.asm:34
SIScreenSize              = $8938 = 35128          data.asm:38
SIScreenWidth             = $892C = 35116          data.asm:32
SIStack                   = $8928 = 35112          data.asm:30
StackTop                  = $7EF0 = 32496          kernel.asm:12
SystemInformationTable    = $8914 = 35092          data.asm:18
__Core__Mult_Loop         = $812F = 33071          multiply.asm:24
__Core__Mult_Shift        = $8134 = 33076          multiply.asm:28
__DSSExit                 = $806C = 32876          debug.asm:48
__DSSPrintDecimal         = $8071 = 32881          debug.asm:53
__DSSSBLClear             = $803F = 32831          debug.asm:24
__DSSShowLoop             = $804F = 32847          debug.asm:32
__GFXWCExit               = $8168 = 33128          graphics.asm:36
__IsNonZero               = $85FC = 34300          __words.asm:700
__IsPositive              = $85F3 = 34291          __words.asm:687
__IsPositive2             = $8605 = 34309          __words.asm:712
__L2Exit                  = $8362 = 33634          screen_layer2.asm:156
__L2Loop                  = $8353 = 33619          screen_layer2.asm:143
__L2Not1                  = $82FE = 33534          screen_layer2.asm:77
__L2Not2                  = $8304 = 33540          screen_layer2.asm:81
__L2Not3                  = $830A = 33546          screen_layer2.asm:85
__L2NotCursor             = $8315 = 33557          screen_layer2.asm:94
__L2NotSet                = $8359 = 33625          screen_layer2.asm:148
__L2Outer                 = $834A = 33610          screen_layer2.asm:137
__LPExit                  = $8407 = 33799          screen_lores.asm:143
__LowLoop                 = $83F3 = 33779          screen_lores.asm:127
__LowNotLower2            = $83E8 = 33768          screen_lores.asm:119
__LowNotReverse           = $83B5 = 33717          screen_lores.asm:79
__LowNotSet               = $83F9 = 33785          screen_lores.asm:132
__LowOuter                = $83EA = 33770          screen_lores.asm:121
__ZXWCCopy                = $82A6 = 33446          screen48k.asm:115
__ZXWCExit                = $82AD = 33453          screen48k.asm:122
___kr4                    = $819E = 33182          keyboard.asm:49
__cs1                     = $824A = 33354          screen48k.asm:29
__cs2                     = $8252 = 33362          screen48k.asm:34
__equalFail               = $846B = 33899          __words.asm:146
__fill1                   = $84FB = 34043          __words.asm:343
__fill2                   = $8502 = 34050          __words.asm:349
__haltLoop                = $860F = 34319          __words.asm:741
__kr1                     = $8182 = 33154          keyboard.asm:32
__kr2                     = $818D = 33165          keyboard.asm:38
__kr3                     = $818F = 33167          keyboard.asm:41
__kr_exit                 = $81BE = 33214          keyboard.asm:79
__kr_keypressed           = $81B8 = 33208          keyboard.asm:73
__kr_no_shift_table       = $81C2 = 33218          keyboard.asm:94
__kr_shift_table          = $8212 = 33298          keyboard.asm:106
__kr_symbol_shift_table   = $81EA = 33258          keyboard.asm:100
__move2                   = $8524 = 34084          __words.asm:387
__move3                   = $851D = 34077          __words.asm:379
__notEqualExit            = $847D = 33917          __words.asm:165
_end                      = $C001 = 49153          kernel.asm:16 (unused)
_size                     = $4001 = 16385          kernel.asm:16 (unused)
e__cforth_21              = $84CF = 33999          __words.asm:288
e__cforth_2b              = $8436 = 33846          __words.asm:66
e__cforth_31_2b           = $85B0 = 34224          __words.asm:591
e__cforth_31_2d           = $85C5 = 34245          __words.asm:622
e__cforth_32_2a           = $8599 = 34201          __words.asm:560
e__cforth_32_2b           = $85BB = 34235          __words.asm:607
e__cforth_32_2d           = $85D0 = 34256          __words.asm:638
e__cforth_32_2f           = $85A6 = 34214          __words.asm:576
e__cforth_40              = $84A0 = 33952          __words.asm:231
e__cforth_62_73_77_61_70  = $858D = 34189          __words.asm:543
e__cforth_63_21           = $84BE = 33982          __words.asm:268
e__cforth_63_40           = $84AF = 33967          __words.asm:249
e__cforth_64_72_6f_70     = $8549 = 34121          __words.asm:446
e__cforth_64_75_70        = $8554 = 34132          __words.asm:462
e__cforth_6e_69_70        = $8562 = 34146          __words.asm:480
e__cforth_6f_76_65_72     = $8571 = 34161          __words.asm:498
e__cforth_70_21           = $853E = 34110          __words.asm:422
e__cforth_70_40           = $852E = 34094          __words.asm:402
e__cforth_73_77_61_70     = $8580 = 34176          __words.asm:516
forth__cforth_21          = $84C8 = 33992          __words.asm:280 (unused)
forth__cforth_2a          = $840E = 33806          __words.asm:17 (unused)
forth__cforth_2b          = $8431 = 33841          __words.asm:60 (unused)
forth__cforth_2b_21       = $84D9 = 34009          __words.asm:300 (unused)
forth__cforth_2b_6f_72    = $8452 = 33874          __words.asm:108 (unused)
forth__cforth_2d          = $85D9 = 34265          __words.asm:650 (unused)
forth__cforth_2f          = $8417 = 33815          __words.asm:28 (unused)
forth__cforth_2f_6d_6f_64 = $8428 = 33832          __words.asm:49 (unused)
forth__cforth_30_3c       = $85FD = 34301          __words.asm:707 (unused)
forth__cforth_30_3d       = $85F4 = 34292          __words.asm:694 (unused)
forth__cforth_31_2b       = $85AF = 34223          __words.asm:588 (unused)
forth__cforth_31_2d       = $85C4 = 34244          __words.asm:619 (unused)
forth__cforth_32_2a       = $8596 = 34198          __words.asm:555 (unused)
forth__cforth_32_2b       = $85B9 = 34233          __words.asm:603 (unused)
forth__cforth_32_2d       = $85CE = 34254          __words.asm:634 (unused)
forth__cforth_32_2f       = $85A2 = 34210          __words.asm:572 (unused)
forth__cforth_3c_3e       = $846D = 33901          __words.asm:153 (unused)
forth__cforth_3d          = $845B = 33883          __words.asm:134 (unused)
forth__cforth_40          = $849A = 33946          __words.asm:224 (unused)
forth__cforth_61_62_73    = $85E8 = 34280          __words.asm:677 (unused)
forth__cforth_61_6e_64    = $8440 = 33856          __words.asm:78 (unused)
forth__cforth_62_73_77_61_70 = $858A = 34186          __words.asm:538 (unused)
forth__cforth_63_21       = $84B8 = 33976          __words.asm:261 (unused)
forth__cforth_63_40       = $84AA = 33962          __words.asm:243 (unused)
forth__cforth_64_72_6f_70 = $8547 = 34119          __words.asm:442 (unused)
forth__cforth_64_75_70    = $8552 = 34130          __words.asm:458 (unused)
forth__cforth_66_69_6c_6c = $84F3 = 34035          __words.asm:334 (unused)
forth__cforth_68_61_6c_74 = $860F = 34319          __words.asm:739 (unused)
forth__cforth_69_6e_6b_65_79 = $8606 = 34310          __words.asm:727 (unused)
forth__cforth_6d_6f_64    = $841F = 33823          __words.asm:38 (unused)
forth__cforth_6d_6f_64_65_2e_34_38 = $847F = 33919          __words.asm:182 (unused)
forth__cforth_6d_6f_64_65_2e_6c_61_79_65_72_32 = $8491 = 33937          __words.asm:204 (unused)
forth__cforth_6d_6f_64_65_2e_6c_6f_77_72_65_73 = $8488 = 33928          __words.asm:193 (unused)
forth__cforth_6d_6f_76_65 = $8505 = 34053          __words.asm:357 (unused)
forth__cforth_6e_65_67_61_74_65 = $85E0 = 34272          __words.asm:663 (unused)
forth__cforth_6e_69_70    = $855D = 34141          __words.asm:474 (unused)
forth__cforth_6f_72       = $8449 = 33865          __words.asm:93 (unused)
forth__cforth_6f_72_21    = $84E6 = 34022          __words.asm:317 (unused)
forth__cforth_6f_76_65_72 = $856C = 34156          __words.asm:492 (unused)
forth__cforth_70_21       = $8537 = 34103          __words.asm:414 (unused)
forth__cforth_70_40       = $8527 = 34087          __words.asm:395 (unused)
forth__cforth_73_77_61_70 = $857B = 34171          __words.asm:510 (unused)
g__cforth_21              = $84CA = 33994          __words.asm:282
g__cforth_2b              = $8433 = 33843          __words.asm:62
g__cforth_31_2b           = $85AF = 34223          __words.asm:589
g__cforth_31_2d           = $85C4 = 34244          __words.asm:620
g__cforth_32_2a           = $8596 = 34198          __words.asm:556
g__cforth_32_2b           = $85B9 = 34233          __words.asm:604
g__cforth_32_2d           = $85CE = 34254          __words.asm:635
g__cforth_32_2f           = $85A2 = 34210          __words.asm:573
g__cforth_40              = $849C = 33948          __words.asm:226
g__cforth_62_73_77_61_70  = $858A = 34186          __words.asm:539
g__cforth_63_21           = $84BA = 33978          __words.asm:263
g__cforth_63_40           = $84AB = 33963          __words.asm:245
g__cforth_64_72_6f_70     = $8548 = 34120          __words.asm:444
g__cforth_64_75_70        = $8553 = 34131          __words.asm:460
g__cforth_6e_69_70        = $855F = 34143          __words.asm:476
g__cforth_6f_76_65_72     = $856E = 34158          __words.asm:494
g__cforth_70_21           = $8538 = 34104          __words.asm:416
g__cforth_70_40           = $8528 = 34088          __words.asm:397
g__cforth_73_77_61_70     = $857D = 34173          __words.asm:512
macro__cforth_21          = $84D1 = 34001          __words.asm:291 (unused)
macro__cforth_2b          = $8438 = 33848          __words.asm:69 (unused)
macro__cforth_31_2b       = $85B1 = 34225          __words.asm:594 (unused)
macro__cforth_31_2d       = $85C6 = 34246          __words.asm:625 (unused)
macro__cforth_32_2a       = $859A = 34202          __words.asm:563 (unused)
macro__cforth_32_2b       = $85BC = 34236          __words.asm:610 (unused)
macro__cforth_32_2d       = $85D1 = 34257          __words.asm:641 (unused)
macro__cforth_32_2f       = $85A7 = 34215          __words.asm:579 (unused)
macro__cforth_40          = $84A2 = 33954          __words.asm:234 (unused)
macro__cforth_62_73_77_61_70 = $858E = 34190          __words.asm:546 (unused)
macro__cforth_63_21       = $84C0 = 33984          __words.asm:271 (unused)
macro__cforth_63_40       = $84B0 = 33968          __words.asm:252 (unused)
macro__cforth_64_72_6f_70 = $854A = 34122          __words.asm:449 (unused)
macro__cforth_64_75_70    = $8555 = 34133          __words.asm:465 (unused)
macro__cforth_6e_69_70    = $8564 = 34148          __words.asm:483 (unused)
macro__cforth_6f_76_65_72 = $8573 = 34163          __words.asm:501 (unused)
macro__cforth_70_21       = $853F = 34111          __words.asm:425 (unused)
macro__cforth_70_40       = $852F = 34095          __words.asm:405 (unused)
macro__cforth_73_77_61_70 = $8582 = 34178          __words.asm:519 (unused)


total time: 0.0070 sec.
no errors
